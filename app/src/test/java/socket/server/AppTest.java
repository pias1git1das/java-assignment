/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import org.junit.jupiter.api.*;
import socket.client.Client;
import socket.client.RequestThread;
import socket.server.io.RequestObject;
import socket.server.manager.PrimeCalculationManager;

import javax.annotation.CheckForNull;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AppTest {
    private static InetAddress host;
    private static final int PORT = 9876;
    private static List<Client> list = new ArrayList<>();

    @BeforeAll
    static void initialize() throws IOException {
        Runnable runnable = () -> {
            try {
                new App().startServerAndAcceptRequest();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        };
        Thread serverThread = new Thread(runnable);
        serverThread.start();
        host = InetAddress.getLocalHost();
    }

    @Test
    void sendMultiRequestMultiClient() throws Exception {
        List<Client> clientList = new ArrayList<>();
        // creating a client pool
        for (int c = 1; c <= 10; c++) {
            Client client = new Client("client" + c, "127.0.0.1", 9876);
            clientList.add(client);
        }
        /// making 1000 request for 10 clients
        for (int i = 1; i <= 3000; i++) {
            Random r = new Random();
            int randomClient = r.nextInt(Integer.MAX_VALUE) % clientList.size();
            Client client = clientList.get(randomClient);

            /// creating request object
            RequestObject req = new RequestObject();
            HashMap<String, String> hm = new HashMap<>();
            hm.put("n", "" + r.nextInt(3000));

            req.setManagerName("PrimeCalculationManager");
            req.setMethod("findPrimes");
            req.setRequestId(client.getClientId() + "-" + i);
            req.setArgs(hm);
            req.setMessage("request");
            RequestThread thread = new RequestThread(client, req);
            Thread t = new Thread(thread);
            t.start();
        }
    }

    @Test
    void sendRequestWithNonInteger() throws Exception {
        Client client = new Client("client1", "127.0.0.1", 9876);
        RequestObject req = new RequestObject();
        HashMap<String, String> hm = new HashMap<>();
        hm.put("n", "NonInteger");
        req.setManagerName("PrimeCalculationManager");
        req.setMethod("findPrimes");
        req.setRequestId("client1-1");
        req.setArgs(hm);
        req.setMessage("request");
        client.sendRequest(req);
        list.add(client);
    }

    @AfterAll
    static void release() {
        for (Client c : list)
            c.closeClient();
    }
}
